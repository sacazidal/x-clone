"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/imagekitio-next";
exports.ids = ["vendor-chunks/imagekitio-next"];
exports.modules = {

/***/ "(ssr)/./node_modules/imagekitio-next/dist/imagekit-next.esm.js":
/*!****************************************************************!*\
  !*** ./node_modules/imagekitio-next/dist/imagekit-next.esm.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IKImage: () => (/* binding */ IKImage),\n/* harmony export */   IKUpload: () => (/* binding */ IKUpload),\n/* harmony export */   IKVideo: () => (/* binding */ IKVideo),\n/* harmony export */   ImageKitClient: () => (/* binding */ ImageKit),\n/* harmony export */   ImageKitContext: () => (/* binding */ ImageKitContext),\n/* harmony export */   ImageKitProvider: () => (/* binding */ ImageKitProvider)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_image__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/image */ \"(ssr)/./node_modules/next/dist/api/image.js\");\n\n\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function () {};\n\n      return {\n        s: F,\n        n: function () {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function (e) {\n          throw e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function () {\n      it = o[Symbol.iterator]();\n    },\n    n: function () {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function (e) {\n      didErr = true;\n      err = e;\n    },\n    f: function () {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nvar version = \"3.0.2\";\n\nvar errorMessages = {\n  MANDATORY_INITIALIZATION_MISSING: {\n    message: \"Missing urlEndpoint during SDK initialization\",\n    help: \"\"\n  },\n  INVALID_TRANSFORMATION_POSITION: {\n    message: \"Invalid transformationPosition parameter\",\n    help: \"\"\n  },\n  PRIVATE_KEY_CLIENT_SIDE: {\n    message: \"privateKey should not be passed on the client side\",\n    help: \"\"\n  },\n  MISSING_UPLOAD_DATA: {\n    message: \"Missing data for upload\",\n    help: \"\"\n  },\n  MISSING_UPLOAD_FILE_PARAMETER: {\n    message: \"Missing file parameter for upload\",\n    help: \"\"\n  },\n  MISSING_UPLOAD_FILENAME_PARAMETER: {\n    message: \"Missing fileName parameter for upload\",\n    help: \"\"\n  },\n  MISSING_AUTHENTICATION_ENDPOINT: {\n    message: \"Missing authentication endpoint for upload\",\n    help: \"\"\n  },\n  MISSING_PUBLIC_KEY: {\n    message: \"Missing public key for upload\",\n    help: \"\"\n  },\n  AUTH_ENDPOINT_TIMEOUT: {\n    message: \"The authenticationEndpoint you provided timed out in 60 seconds\",\n    help: \"\"\n  },\n  AUTH_ENDPOINT_NETWORK_ERROR: {\n    message: \"Request to authenticationEndpoint failed due to network error\",\n    help: \"\"\n  },\n  AUTH_INVALID_RESPONSE: {\n    message: \"Invalid response from authenticationEndpoint. The SDK expects a JSON response with three fields i.e. signature, token and expire.\",\n    help: \"\"\n  },\n  UPLOAD_ENDPOINT_NETWORK_ERROR: {\n    message: \"Request to ImageKit upload endpoint failed due to network error\",\n    help: \"\"\n  },\n  INVALID_UPLOAD_OPTIONS: {\n    message: \"Invalid uploadOptions parameter\",\n    help: \"\"\n  },\n  MISSING_SIGNATURE: {\n    message: \"Missing signature for upload. The SDK expects token, signature and expire for authentication.\",\n    help: \"\"\n  },\n  MISSING_TOKEN: {\n    message: \"Missing token for upload. The SDK expects token, signature and expire for authentication.\",\n    help: \"\"\n  },\n  MISSING_EXPIRE: {\n    message: \"Missing expire for upload. The SDK expects token, signature and expire for authentication.\",\n    help: \"\"\n  },\n  INVALID_TRANSFORMATION: {\n    message: \"Invalid transformation parameter. Please include at least pre, post, or both.\",\n    help: \"\"\n  },\n  INVALID_PRE_TRANSFORMATION: {\n    message: \"Invalid pre transformation parameter.\",\n    help: \"\"\n  },\n  INVALID_POST_TRANSFORMATION: {\n    message: \"Invalid post transformation parameter.\",\n    help: \"\"\n  }\n};\n\nfunction respond (isError, response, callback) {\n  if (typeof callback == \"function\") {\n    if (isError) {\n      callback(response, null);\n    } else {\n      callback(null, response);\n    }\n  }\n}\n\nfunction getResponseHeaderMap(xhr) {\n  var headers = {};\n  var responseHeaders = xhr.getAllResponseHeaders();\n  if (Object.keys(responseHeaders).length) {\n    responseHeaders.trim().split(/[\\r\\n]+/).map(function (value) {\n      return value.split(/: /);\n    }).forEach(function (keyValue) {\n      headers[keyValue[0].trim()] = keyValue[1].trim();\n    });\n  }\n  return headers;\n}\nvar addResponseHeadersAndBody = function addResponseHeadersAndBody(body, xhr) {\n  var response = _objectSpread2({}, body);\n  var responseMetadata = {\n    statusCode: xhr.status,\n    headers: getResponseHeaderMap(xhr)\n  };\n  Object.defineProperty(response, \"$ResponseMetadata\", {\n    value: responseMetadata,\n    enumerable: false,\n    writable: false\n  });\n  return response;\n};\nvar request = function request(uploadFileXHR, formData, callback) {\n  uploadFile(uploadFileXHR, formData).then(function (result) {\n    return respond(false, result, callback);\n  }, function (ex) {\n    return respond(true, ex, callback);\n  });\n};\nvar uploadFile = function uploadFile(uploadFileXHR, formData) {\n  return new Promise(function (resolve, reject) {\n    uploadFileXHR.open('POST', 'https://upload.imagekit.io/api/v1/files/upload');\n    uploadFileXHR.onerror = function (e) {\n      return reject(errorMessages.UPLOAD_ENDPOINT_NETWORK_ERROR);\n    };\n    uploadFileXHR.onload = function () {\n      if (uploadFileXHR.status === 200) {\n        try {\n          var body = JSON.parse(uploadFileXHR.responseText);\n          var uploadResponse = addResponseHeadersAndBody(body, uploadFileXHR);\n          return resolve(uploadResponse);\n        } catch (ex) {\n          return reject(ex);\n        }\n      } else {\n        try {\n          var body = JSON.parse(uploadFileXHR.responseText);\n          var uploadError = addResponseHeadersAndBody(body, uploadFileXHR);\n          return reject(uploadError);\n        } catch (ex) {\n          return reject(ex);\n        }\n      }\n    };\n    uploadFileXHR.send(formData);\n  });\n};\n\nvar upload = function upload(xhr, uploadOptions, options, callback) {\n  if (!uploadOptions.file) {\n    respond(true, errorMessages.MISSING_UPLOAD_FILE_PARAMETER, callback);\n    return;\n  }\n  if (!uploadOptions.fileName) {\n    respond(true, errorMessages.MISSING_UPLOAD_FILENAME_PARAMETER, callback);\n    return;\n  }\n  if (!options.publicKey) {\n    respond(true, errorMessages.MISSING_PUBLIC_KEY, callback);\n    return;\n  }\n  if (!uploadOptions.token) {\n    respond(true, errorMessages.MISSING_TOKEN, callback);\n    return;\n  }\n  if (!uploadOptions.signature) {\n    respond(true, errorMessages.MISSING_SIGNATURE, callback);\n    return;\n  }\n  if (!uploadOptions.expire) {\n    respond(true, errorMessages.MISSING_EXPIRE, callback);\n    return;\n  }\n  if (uploadOptions.transformation) {\n    if (!(Object.keys(uploadOptions.transformation).includes(\"pre\") || Object.keys(uploadOptions.transformation).includes(\"post\"))) {\n      respond(true, errorMessages.INVALID_TRANSFORMATION, callback);\n      return;\n    }\n    if (Object.keys(uploadOptions.transformation).includes(\"pre\") && !uploadOptions.transformation.pre) {\n      respond(true, errorMessages.INVALID_PRE_TRANSFORMATION, callback);\n      return;\n    }\n    if (Object.keys(uploadOptions.transformation).includes(\"post\")) {\n      if (Array.isArray(uploadOptions.transformation.post)) {\n        var _iterator = _createForOfIteratorHelper(uploadOptions.transformation.post),\n            _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var transformation = _step.value;\n            if (transformation.type === \"abs\" && !(transformation.protocol || transformation.value)) {\n              respond(true, errorMessages.INVALID_POST_TRANSFORMATION, callback);\n              return;\n            } else if (transformation.type === \"transformation\" && !transformation.value) {\n              respond(true, errorMessages.INVALID_POST_TRANSFORMATION, callback);\n              return;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      } else {\n        respond(true, errorMessages.INVALID_POST_TRANSFORMATION, callback);\n        return;\n      }\n    }\n  }\n  var formData = new FormData();\n  var key;\n  for (key in uploadOptions) {\n    if (key) {\n      if (key === \"file\" && typeof uploadOptions.file != \"string\") {\n        formData.append('file', uploadOptions.file, String(uploadOptions.fileName));\n      } else if (key === \"tags\" && Array.isArray(uploadOptions.tags)) {\n        formData.append('tags', uploadOptions.tags.join(\",\"));\n      } else if (key === 'signature') {\n        formData.append(\"signature\", uploadOptions.signature);\n      } else if (key === 'expire') {\n        formData.append(\"expire\", String(uploadOptions.expire));\n      } else if (key === 'token') {\n        formData.append(\"token\", uploadOptions.token);\n      } else if (key === \"responseFields\" && Array.isArray(uploadOptions.responseFields)) {\n        formData.append('responseFields', uploadOptions.responseFields.join(\",\"));\n      } else if (key === \"extensions\" && Array.isArray(uploadOptions.extensions)) {\n        formData.append('extensions', JSON.stringify(uploadOptions.extensions));\n      } else if (key === \"customMetadata\" && _typeof(uploadOptions.customMetadata) === \"object\" && !Array.isArray(uploadOptions.customMetadata) && uploadOptions.customMetadata !== null) {\n        formData.append('customMetadata', JSON.stringify(uploadOptions.customMetadata));\n      } else if (key === \"transformation\" && _typeof(uploadOptions.transformation) === \"object\" && uploadOptions.transformation !== null) {\n        formData.append(key, JSON.stringify(uploadOptions.transformation));\n      } else if (key === 'checks' && uploadOptions.checks) {\n        formData.append(\"checks\", uploadOptions.checks);\n      } else if (uploadOptions[key] !== undefined) {\n        formData.append(key, String(uploadOptions[key]));\n      }\n    }\n  }\n  formData.append(\"publicKey\", options.publicKey);\n  request(xhr, formData, callback);\n};\n\nvar supportedTransforms = {\n  width: \"w\",\n  height: \"h\",\n  aspectRatio: \"ar\",\n  quality: \"q\",\n  crop: \"c\",\n  cropMode: \"cm\",\n  focus: \"fo\",\n  x: \"x\",\n  y: \"y\",\n  format: \"f\",\n  radius: \"r\",\n  background: \"bg\",\n  border: \"b\",\n  rotation: \"rt\",\n  rotate: \"rt\",\n  blur: \"bl\",\n  named: \"n\",\n  progressive: \"pr\",\n  lossless: \"lo\",\n  trim: \"t\",\n  metadata: \"md\",\n  colorProfile: \"cp\",\n  defaultImage: \"di\",\n  dpr: \"dpr\",\n  effectSharpen: \"e-sharpen\",\n  effectUSM: \"e-usm\",\n  effectContrast: \"e-contrast\",\n  effectGray: \"e-grayscale\",\n  original: \"orig\",\n  effectShadow: \"e-shadow\",\n  effectGradient: \"e-gradient\",\n  raw: \"raw\"\n};\n\nvar DEFAULT_TRANSFORMATION_POSITION = \"path\";\nvar QUERY_TRANSFORMATION_POSITION = \"query\";\nvar VALID_TRANSFORMATION_POSITIONS = [DEFAULT_TRANSFORMATION_POSITION, QUERY_TRANSFORMATION_POSITION];\nvar CHAIN_TRANSFORM_DELIMITER = \":\";\nvar TRANSFORM_DELIMITER = \",\";\nvar TRANSFORM_KEY_VALUE_DELIMITER = \"-\";\nvar transformationUtils = {\n  getDefault: function getDefault() {\n    return DEFAULT_TRANSFORMATION_POSITION;\n  },\n  addAsQueryParameter: function addAsQueryParameter(options) {\n    return options.transformationPosition === QUERY_TRANSFORMATION_POSITION;\n  },\n  validParameters: function validParameters(options) {\n    if (typeof options.transformationPosition == \"undefined\") return false;\n    return VALID_TRANSFORMATION_POSITIONS.indexOf(options.transformationPosition) != -1;\n  },\n  getTransformKey: function getTransformKey(transform) {\n    if (!transform) {\n      return \"\";\n    }\n    return supportedTransforms[transform] || supportedTransforms[transform.toLowerCase()] || \"\";\n  },\n  getChainTransformDelimiter: function getChainTransformDelimiter() {\n    return CHAIN_TRANSFORM_DELIMITER;\n  },\n  getTransformDelimiter: function getTransformDelimiter() {\n    return TRANSFORM_DELIMITER;\n  },\n  getTransformKeyValueDelimiter: function getTransformKeyValueDelimiter() {\n    return TRANSFORM_KEY_VALUE_DELIMITER;\n  }\n};\n\nvar TRANSFORMATION_PARAMETER = \"tr\";\nfunction removeTrailingSlash(str) {\n  if (typeof str == \"string\" && str[str.length - 1] == \"/\") {\n    str = str.substring(0, str.length - 1);\n  }\n  return str;\n}\nfunction removeLeadingSlash(str) {\n  if (typeof str == \"string\" && str[0] == \"/\") {\n    str = str.slice(1);\n  }\n  return str;\n}\nfunction pathJoin(parts, sep) {\n  var separator = sep || \"/\";\n  var replace = new RegExp(separator + \"{1,}\", \"g\");\n  return parts.join(separator).replace(replace, separator);\n}\nvar buildURL = function buildURL(opts) {\n  if (!opts.path && !opts.src) {\n    return \"\";\n  }\n  var urlObj, isSrcParameterUsedForURL, urlEndpointPattern;\n  try {\n    if (opts.path) {\n      urlEndpointPattern = new URL(opts.urlEndpoint).pathname;\n      urlObj = new URL(pathJoin([opts.urlEndpoint.replace(urlEndpointPattern, \"\"), opts.path]));\n    } else {\n      urlObj = new URL(opts.src);\n      isSrcParameterUsedForURL = true;\n    }\n  } catch (e) {\n    console.error(e);\n    return \"\";\n  }\n  for (var i in opts.queryParameters) {\n    urlObj.searchParams.append(i, String(opts.queryParameters[i]));\n  }\n  var transformationString = constructTransformationString(opts.transformation);\n  if (transformationString && transformationString.length) {\n    if (transformationUtils.addAsQueryParameter(opts) || isSrcParameterUsedForURL) {\n      urlObj.searchParams.append(TRANSFORMATION_PARAMETER, transformationString);\n    } else {\n      urlObj.pathname = pathJoin([TRANSFORMATION_PARAMETER + transformationUtils.getChainTransformDelimiter() + transformationString, urlObj.pathname]);\n    }\n  }\n  if (urlEndpointPattern) {\n    urlObj.pathname = pathJoin([urlEndpointPattern, urlObj.pathname]);\n  } else {\n    urlObj.pathname = pathJoin([urlObj.pathname]);\n  }\n  return urlObj.href;\n};\nfunction constructTransformationString(transformation) {\n  if (!Array.isArray(transformation)) {\n    return \"\";\n  }\n  var parsedTransforms = [];\n  for (var i = 0, l = transformation.length; i < l; i++) {\n    var parsedTransformStep = [];\n    for (var key in transformation[i]) {\n      if (transformation[i][key] === undefined || transformation[i][key] === null) continue;\n      var transformKey = transformationUtils.getTransformKey(key);\n      if (!transformKey) {\n        transformKey = key;\n      }\n      if (transformation[i][key] === \"-\") {\n        parsedTransformStep.push(transformKey);\n      } else if (key === \"raw\") {\n        parsedTransformStep.push(transformation[i][key]);\n      } else {\n        var value = transformation[i][key];\n        if (transformKey === \"di\") {\n          value = removeTrailingSlash(removeLeadingSlash(value || \"\"));\n          value = value.replace(/\\//g, \"@@\");\n        }\n        parsedTransformStep.push([transformKey, value].join(transformationUtils.getTransformKeyValueDelimiter()));\n      }\n    }\n    parsedTransforms.push(parsedTransformStep.join(transformationUtils.getTransformDelimiter()));\n  }\n  return parsedTransforms.join(transformationUtils.getChainTransformDelimiter());\n}\n\nvar url = function url(urlOpts, defaultOptions) {\n  return buildURL(_objectSpread2(_objectSpread2({}, defaultOptions), urlOpts));\n};\n\nfunction mandatoryParametersAvailable(options) {\n  return options.urlEndpoint;\n}\nvar promisify = function promisify(thisContext, fn) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (args.length === fn.length && typeof args[args.length - 1] !== \"undefined\") {\n      if (typeof args[args.length - 1] !== \"function\") {\n        throw new Error(\"Callback must be a function.\");\n      }\n      fn.call.apply(fn, [thisContext].concat(args));\n    } else {\n      return new Promise(function (resolve, reject) {\n        var callback = function callback(err) {\n          if (err) {\n            return reject(err);\n          } else {\n            for (var _len2 = arguments.length, results = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n              results[_key2 - 1] = arguments[_key2];\n            }\n            resolve(results.length > 1 ? results : results[0]);\n          }\n        };\n        args.pop();\n        args.push(callback);\n        fn.call.apply(fn, [thisContext].concat(args));\n      });\n    }\n  };\n};\nvar ImageKit = function () {\n  function ImageKit(opts) {\n    _classCallCheck(this, ImageKit);\n    _defineProperty(this, \"options\", {\n      sdkVersion: \"javascript-\".concat(version),\n      publicKey: \"\",\n      urlEndpoint: \"\",\n      transformationPosition: transformationUtils.getDefault()\n    });\n    this.options = _objectSpread2(_objectSpread2({}, this.options), opts || {});\n    if (!mandatoryParametersAvailable(this.options)) {\n      throw errorMessages.MANDATORY_INITIALIZATION_MISSING;\n    }\n    if (!transformationUtils.validParameters(this.options)) {\n      throw errorMessages.INVALID_TRANSFORMATION_POSITION;\n    }\n  }\n  _createClass(ImageKit, [{\n    key: \"url\",\n    value: function url$1(urlOptions) {\n      return url(urlOptions, this.options);\n    }\n  }, {\n    key: \"upload\",\n    value: function upload$1(uploadOptions, callbackOrOptions, options) {\n      var callback;\n      if (typeof callbackOrOptions === 'function') {\n        callback = callbackOrOptions;\n      } else {\n        options = callbackOrOptions || {};\n      }\n      if (!uploadOptions || _typeof(uploadOptions) !== \"object\") {\n        return respond(true, errorMessages.INVALID_UPLOAD_OPTIONS, callback);\n      }\n      var mergedOptions = _objectSpread2(_objectSpread2({}, this.options), options);\n      var _ref = uploadOptions || {},\n          userProvidedXHR = _ref.xhr;\n      delete uploadOptions.xhr;\n      var xhr = userProvidedXHR || new XMLHttpRequest();\n      return promisify(this, upload)(xhr, uploadOptions, mergedOptions, callback);\n    }\n  }]);\n  return ImageKit;\n}();\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\n// Create the context\nconst ImageKitContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});\n/**\n * Provides a container for ImageKit components. Any option set in ImageKitProvider will be passed to the children.\n *\n * @example\n *<ImageKitProvider  publicKey=\"<public key>\" urlEndpoint=\"url link\">\n *    <!-- other tags -->\n *    <Image src={link}/>\n *</ImageKitProvider>\n */\nconst ImageKitProvider = props => {\n  const extractContextOptions = mergedOptions => {\n    const propKeys = [\"publicKey\", \"urlEndpoint\", \"authenticator\", \"transformationPosition\", \"ikClient\"];\n    for (const key in mergedOptions) {\n      if (!propKeys.includes(key)) {\n        delete mergedOptions[key];\n      }\n    }\n    return mergedOptions;\n  };\n  const mergedOptions = Object.assign({}, props);\n  const contextOptionsExtracted = extractContextOptions(mergedOptions);\n  if (contextOptionsExtracted.urlEndpoint && contextOptionsExtracted.urlEndpoint.trim() !== \"\") {\n    contextOptionsExtracted.ikClient = new ImageKit({\n      urlEndpoint: contextOptionsExtracted.urlEndpoint,\n      // @ts-ignore\n      sdkVersion: \"\"\n    });\n  }\n  return react__WEBPACK_IMPORTED_MODULE_0___default().createElement(ImageKitContext.Provider, {\n    value: contextOptionsExtracted\n  }, props.children);\n};\n\nconst useImageKitComponent = props => {\n  const contextOptions = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ImageKitContext);\n  const getIKClient = () => {\n    if (contextOptions && contextOptions.ikClient) {\n      return contextOptions.ikClient;\n    }\n    let {\n      urlEndpoint\n    } = props;\n    urlEndpoint = urlEndpoint || contextOptions && contextOptions.urlEndpoint;\n    if (!urlEndpoint || urlEndpoint.trim() === \"\") {\n      throw new Error(\"Missing urlEndpoint during initialization\");\n    }\n    const ikClient = new ImageKit({\n      urlEndpoint: urlEndpoint,\n      // @ts-ignore\n      sdkVersion: \"\"\n    });\n    return ikClient;\n  };\n  return {\n    getIKClient\n  };\n};\n\nconst fetchEffectiveConnection = () => {\n  try {\n    return navigator.connection.effectiveType;\n  } catch (ex) {\n    return \"4g\";\n  }\n};\nconst getSrc = ({\n  urlEndpoint,\n  lqip,\n  src,\n  path,\n  transformation,\n  transformationPosition,\n  queryParameters\n}, ikClient, contextOptions) => {\n  let options;\n  if (src) {\n    options = {\n      urlEndpoint: urlEndpoint || contextOptions.urlEndpoint,\n      src,\n      transformation: transformation || undefined,\n      transformationPosition: transformationPosition || contextOptions.transformationPosition || undefined,\n      queryParameters: queryParameters || {}\n    };\n  } else if (path) {\n    options = {\n      urlEndpoint: urlEndpoint || contextOptions.urlEndpoint,\n      path,\n      transformation: transformation || undefined,\n      transformationPosition: transformationPosition || contextOptions.transformationPosition || undefined,\n      queryParameters: queryParameters || {}\n    };\n  } else return {\n    originalSrc: \"\"\n  };\n  const result = {\n    originalSrc: ikClient.url(options)\n  };\n  if (lqip && lqip.active) {\n    var quality = Math.round(lqip.quality || lqip.threshold || 20);\n    var blur = Math.round(lqip.blur || 6);\n    var newTransformation = options.transformation ? [...options.transformation] : [];\n    if (lqip.raw && typeof lqip.raw === \"string\" && lqip.raw.trim() !== \"\") {\n      newTransformation.push({\n        raw: lqip.raw.trim()\n      });\n    } else {\n      newTransformation.push({\n        quality: String(quality),\n        blur: String(blur)\n      });\n    }\n    result.lqipSrc = ikClient.url(Object.assign(Object.assign({}, options), {\n      transformation: newTransformation\n    }));\n  }\n  return result;\n};\nconst getIKElementsUrl = ({\n  lqip = null,\n  loading\n}, {\n  intersected,\n  originalSrcLoaded,\n  originalSrc,\n  lqipSrc\n}) => {\n  /*\n      No lazy loading no lqip\n        src=originalImage\n      No lazy loading lqip\n        src=lqip\n        src=originalImage (when loaded)\n      lazy loading and no lqip\n        src=''\n        onIntersect:\n        src=originalImage\n      lazy loading and lqip\n        src=lqip\n        onIntersect:\n        src=originalImage (when loaded)\n    */\n  const isLqipActive = lqip => lqip && lqip.active;\n  if (loading !== \"lazy\" && !isLqipActive(lqip)) {\n    return originalSrc;\n  } else if (loading !== \"lazy\" && isLqipActive(lqip)) {\n    if (originalSrcLoaded) {\n      return originalSrc;\n    } else {\n      return lqipSrc;\n    }\n  } else if (loading === \"lazy\" && !isLqipActive(lqip)) {\n    if (intersected) {\n      return originalSrc;\n    } else {\n      return \"\";\n    }\n  } else {\n    if (intersected && originalSrcLoaded) {\n      return originalSrc;\n    } else {\n      return lqipSrc;\n    }\n  }\n};\nfunction hasProperty(array, property) {\n  return array.some(obj => obj.hasOwnProperty(property));\n}\nconst updateTransformation = ({\n  width,\n  height,\n  transformation,\n  src,\n  path,\n  quality\n}) => {\n  //if height and width are there in props and absent in transformation then add it to the transformatiion\n  if ((src || path) && (width || quality || height)) {\n    let transformationObject = {};\n    if (!((transformation === null || transformation === void 0 ? void 0 : transformation.length) && (hasProperty(transformation, \"height\") || hasProperty(transformation, \"width\")))) {\n      if (height) transformationObject[\"height\"] = String(height);\n      if (width) transformationObject[\"width\"] = String(width);\n    }\n    if (!((transformation === null || transformation === void 0 ? void 0 : transformation.length) && hasProperty(transformation, \"quality\")) && quality) transformationObject[\"quality\"] = String(quality);\n    if (Object.keys(transformationObject).length) {\n      if (transformation === null || transformation === void 0 ? void 0 : transformation.length) transformation = [...transformation, transformationObject];else transformation = [transformationObject];\n    }\n  }\n  return transformation;\n};\n\nconst IKImage = props => {\n  const [currentUrl, setCurrentUrl] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(undefined);\n  const [imageProps, setImageProps] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});\n  const [originalSrc, setOriginalSrc] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n  const [lqipSrc, setLqipSrc] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n  const [originalSrcLoaded, setOriginalSrcLoaded] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n  const [observe, setObserve] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(undefined);\n  const [initialized, setInitialized] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n  const [intersected, setIntersected] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n  const imageRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  const {\n    getIKClient\n  } = useImageKitComponent(Object.assign({}, props));\n  const contextOptions = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ImageKitContext);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const {\n      originalSrc: newOriginalSrc,\n      lqipSrc: newLqipSrc\n    } = getSrc(Object.assign(Object.assign({}, props), {\n      transformation: updateTransformation(props)\n    }), getIKClient(), contextOptions);\n    setOriginalSrc(newOriginalSrc);\n    setLqipSrc(newLqipSrc ? newLqipSrc : \"\");\n    setInitialized(true);\n  }, [contextOptions, props]);\n  const updateImageUrl = () => __awaiter(void 0, void 0, void 0, function* () {\n    const url = yield getIKElementsUrl(props, {\n      originalSrc,\n      lqipSrc,\n      intersected,\n      contextOptions,\n      initialzeState: initialized,\n      originalSrcLoaded,\n      observe\n    }); // Include intersected state\n    if (url) {\n      setCurrentUrl(url);\n    }\n  });\n  const triggerOriginalImageLoad = () => {\n    var img = new Image();\n    img.onload = () => {\n      setOriginalSrcLoaded(true);\n    };\n    img.src = originalSrc;\n  };\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (originalSrcLoaded) updateImageUrl();\n  }, [originalSrcLoaded]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const image = imageRef.current;\n    const {\n      loading\n    } = props;\n    if (initialized) {\n      if (window && \"IntersectionObserver\" in window && loading === \"lazy\" && lqip) {\n        const connectionType = fetchEffectiveConnection();\n        let rootMargin = \"1250px\";\n        if (connectionType !== \"4g\") rootMargin = \"2500px\";\n        const imageObserver = new IntersectionObserver(entries => {\n          const el = entries[0];\n          if (el && el.isIntersecting && !intersected) {\n            setIntersected(true);\n            setObserve(prevObserver => {\n              if (prevObserver) {\n                prevObserver.disconnect();\n              }\n              return undefined;\n            });\n            triggerOriginalImageLoad();\n            updateImageUrl();\n          }\n        }, {\n          rootMargin: `${rootMargin} 0px ${rootMargin} 0px`\n        });\n        if (image) {\n          imageObserver.observe(image);\n          setObserve(imageObserver);\n        }\n      } else {\n        setIntersected(true);\n        triggerOriginalImageLoad();\n        updateImageUrl();\n      }\n    }\n    return () => {\n      if (observe) {\n        observe.disconnect();\n      }\n    };\n  }, [props, originalSrc, lqipSrc]);\n  const {\n      urlEndpoint,\n      authenticator,\n      publicKey,\n      loading,\n      lqip,\n      path,\n      src,\n      transformation,\n      transformationPosition,\n      queryParameters,\n      alt\n    } = props,\n    restProps = __rest(props, [\"urlEndpoint\", \"authenticator\", \"publicKey\", \"loading\", \"lqip\", \"path\", \"src\", \"transformation\", \"transformationPosition\", \"queryParameters\", \"alt\"]);\n  const restPropsWithoutImageProps = __rest(restProps, [\"fill\", \"quality\", \"priority\", \"placeholder\", \"blurDataURL\", \"unoptimized\", \"overrideSrc\", \"onLoadingComplete\", \"layout\", \"objectFit\", \"objectPosition\", \"lazyBoundary\", \"lazyRoot\"]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    // if height and width are there in transformation skip props height and width and add fill =true\n    const updatedRestProps = restProps;\n    if ((transformation === null || transformation === void 0 ? void 0 : transformation.length) && transformation.some(obj => obj.hasOwnProperty(\"height\") || obj.hasOwnProperty(\"width\"))) {\n      if (updatedRestProps.height) delete updatedRestProps[\"height\"];\n      if (updatedRestProps.width) delete updatedRestProps[\"width\"];\n      updatedRestProps[\"fill\"] = true;\n    }\n    setImageProps(updatedRestProps);\n  }, []);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (lqip === null || lqip === void 0 ? void 0 : lqip.active) console.warn(\"In [imagekitio-next], loading is set to eager when LQIP is used.\");\n  }, [lqip]);\n  return currentUrl != undefined && Object.keys(imageProps).length ? react__WEBPACK_IMPORTED_MODULE_0___default().createElement(next_image__WEBPACK_IMPORTED_MODULE_1__[\"default\"], Object.assign({\n    loader: ({\n      src\n    }) => src,\n    alt: alt,\n    src: currentUrl ? currentUrl : \"\",\n    ref: imageRef,\n    unoptimized: true,\n    loading: (lqip === null || lqip === void 0 ? void 0 : lqip.active) ? \"eager\" : loading\n  }, imageProps)) : react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"img\", Object.assign({\n    src: currentUrl ? currentUrl : undefined,\n    ref: imageRef\n  }, restPropsWithoutImageProps));\n};\n\nconst IKUpload = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref) => {\n  const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});\n  const contextOptions = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ImageKitContext);\n  const {\n    getIKClient\n  } = useImageKitComponent(Object.assign({}, props));\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const abort = () => {\n      if (state.xhr) {\n        state.xhr.abort();\n      }\n    };\n    if (ref && typeof ref === \"object\" && ref.hasOwnProperty(\"current\")) {\n      const refObject = ref;\n      refObject.current.abort = abort;\n    }\n  }, [state.xhr, ref]);\n  const {\n      publicKey,\n      urlEndpoint,\n      authenticator,\n      fileName,\n      useUniqueFileName,\n      tags,\n      folder,\n      isPrivateFile,\n      customCoordinates,\n      responseFields,\n      onError,\n      onSuccess,\n      onUploadStart,\n      onUploadProgress,\n      validateFile,\n      webhookUrl,\n      overwriteFile,\n      overwriteAITags,\n      overwriteTags,\n      overwriteCustomMetadata,\n      extensions,\n      customMetadata,\n      transformation,\n      overrideParameters,\n      checks\n    } = props,\n    restProps = __rest(props, [\"publicKey\", \"urlEndpoint\", \"authenticator\", \"fileName\", \"useUniqueFileName\", \"tags\", \"folder\", \"isPrivateFile\", \"customCoordinates\", \"responseFields\", \"onError\", \"onSuccess\", \"onUploadStart\", \"onUploadProgress\", \"validateFile\", \"webhookUrl\", \"overwriteFile\", \"overwriteAITags\", \"overwriteTags\", \"overwriteCustomMetadata\", \"extensions\", \"customMetadata\", \"transformation\", \"overrideParameters\", \"checks\"]);\n  const uploadFile = e => {\n    var _a;\n    const publicKey = props.publicKey || contextOptions.publicKey;\n    const authenticator = props.authenticator || contextOptions.authenticator;\n    const urlEndpoint = props.urlEndpoint || contextOptions.urlEndpoint;\n    if (!publicKey || publicKey.trim() === \"\") {\n      if (onError && typeof onError === \"function\") {\n        onError({\n          message: \"Missing publicKey\"\n        });\n      }\n      return;\n    }\n    if (!authenticator) {\n      if (onError && typeof onError === \"function\") {\n        onError({\n          message: \"The authenticator function is not provided.\"\n        });\n      }\n      return;\n    }\n    if (typeof authenticator !== \"function\") {\n      if (onError && typeof onError === \"function\") {\n        onError({\n          message: \"The provided authenticator is not a function.\"\n        });\n      }\n      return;\n    }\n    if (!urlEndpoint || urlEndpoint.trim() === \"\") {\n      if (onError && typeof onError === \"function\") {\n        onError({\n          message: \"Missing urlEndpoint\"\n        });\n      }\n      return;\n    }\n    var ikClient = getIKClient();\n    const file = (_a = e.target.files) === null || _a === void 0 ? void 0 : _a[0];\n    if (!file) {\n      return;\n    }\n    if (props.validateFile && !props.validateFile(file)) {\n      return;\n    }\n    if (props.onUploadStart && typeof props.onUploadStart === \"function\") {\n      props.onUploadStart(e);\n    }\n    let overrideValues = {};\n    if (props.overrideParameters && typeof props.overrideParameters === \"function\") {\n      overrideValues = props.overrideParameters(file) || {};\n    }\n    const xhr = new XMLHttpRequest();\n    const progressCb = e => {\n      if (props.onUploadProgress && typeof props.onUploadProgress === \"function\") {\n        props.onUploadProgress(e);\n      }\n    };\n    xhr.upload.addEventListener(\"progress\", progressCb);\n    var params = {\n      file: file,\n      fileName: overrideValues.fileName || fileName || file.name,\n      useUniqueFileName: overrideValues.useUniqueFileName || useUniqueFileName,\n      tags: overrideValues.tags || tags,\n      folder: overrideValues.folder || folder,\n      isPrivateFile: overrideValues.isPrivateFile || isPrivateFile,\n      customCoordinates: overrideValues.customCoordinates || customCoordinates,\n      responseFields,\n      extensions: overrideValues.extensions || extensions,\n      webhookUrl: overrideValues.webhookUrl || webhookUrl,\n      overwriteFile: overrideValues.overwriteFile || overwriteFile,\n      overwriteAITags: overrideValues.overwriteAITags || overwriteAITags,\n      overwriteTags: overrideValues.overwriteTags || overwriteTags,\n      overwriteCustomMetadata: overrideValues.overwriteCustomMetadata || overwriteCustomMetadata,\n      customMetadata: overrideValues.customMetadata || customMetadata,\n      signature: \"\",\n      expire: 0,\n      token: \"\",\n      xhr,\n      transformation: overrideValues.transformation || transformation,\n      checks: overrideValues.checks || checks\n    };\n    const authPromise = authenticator();\n    if (!(authPromise instanceof Promise)) {\n      if (onError && typeof onError === \"function\") {\n        onError({\n          message: \"The authenticator function is expected to return a Promise instance.\"\n        });\n      }\n      return;\n    }\n    authPromise.then(({\n      signature,\n      token,\n      expire\n    }) => {\n      params[\"signature\"] = signature;\n      params[\"expire\"] = expire;\n      params[\"token\"] = token;\n      ikClient.upload(params, (err, result) => {\n        if (err) {\n          if (onError && typeof onError === \"function\") {\n            onError(err);\n          }\n        } else {\n          if (onSuccess && typeof onSuccess === \"function\") {\n            onSuccess(result);\n          }\n        }\n        xhr.upload.removeEventListener(\"progress\", progressCb);\n      }, {\n        publicKey\n      });\n      setState({\n        xhr\n      });\n    }).catch(data => {\n      var error;\n      if (data instanceof Array) {\n        error = data[0];\n      } else {\n        error = data;\n      }\n      if (onError && typeof onError === \"function\") {\n        onError({\n          message: String(error)\n        });\n      }\n      return;\n    });\n  };\n  return react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"input\", Object.assign({}, restProps, {\n    ref: ref,\n    type: \"file\",\n    onChange: e => {\n      if (props.onChange && typeof props.onChange === \"function\") {\n        props.onChange(e);\n      }\n      uploadFile(e);\n    }\n  }));\n});\n\nconst IKVideo = props => {\n  const videoRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n    currentUrl: \"\",\n    contextOptions: {}\n  });\n  const {\n    getIKClient\n  } = useImageKitComponent(Object.assign({}, props));\n  const contextItems = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ImageKitContext);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const {\n      originalSrc\n    } = getSrc(props, getIKClient(), contextItems);\n    setState(prevState => Object.assign(Object.assign({}, prevState), {\n      currentUrl: originalSrc,\n      contextOptions: contextItems\n    }));\n  }, [contextItems, props]);\n  const {\n    currentUrl\n  } = state;\n  const restProps = __rest(props, [\"urlEndpoint\", \"publicKey\", \"authenticator\", \"path\", \"src\", \"transformation\", \"transformationPosition\", \"queryParameters\"]);\n  return react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"video\", Object.assign({}, restProps, {\n    ref: videoRef,\n    key: currentUrl\n  }), react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"source\", {\n    src: currentUrl || undefined,\n    type: \"video/mp4\"\n  }));\n};\n\n\n//# sourceMappingURL=imagekit-next.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/imagekitio-next/dist/imagekit-next.esm.js\n");

/***/ })

};
;